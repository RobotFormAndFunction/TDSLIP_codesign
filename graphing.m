function graphing(data,simparam, plotType,fignum,plotdata,plotcolor, plotlabels)
% GRAPHING can generate a number of plot types for SLIP models
% Inputs:
%   data, data structure generated by Stance_sim, required for all cases
%
%   simparam, simulation_param class
%
%   fignum, figure number
%
%   plotType integer value to select type of plot
%       1: will plot the energy of the system
%       2: Will plot the data from plotdata breaking it into stance and
%       flight portions using, plotcolor options
%       3: Will plot the data from plotdata breaking it into stance and
%       flight portions using, also plots the ground height, plotcolor options
%       4: Plots anything vs time. Creates a Nx1 subplot with m number of plots per subplot. Uses
%       plotdata, plotlabels (optional), and plotcolor(optional)
%
%   Plotdata a Mx2 matrix where the first column is x data, second column is
%       y data, this is not needed for plotType 1, only 2
%       if plotType=3 will plot the number of columns vs time
%       if plotType=4 must be a cell.  Each matrix in the cell corresponds
%       to what is to be plotted in each subplot.
%       {[subplot1],[subplot2],[subplot3]}
%
%   plotcolor optional matrix of plot line colors, used for plotType=2,3,4
%       PlotType 2,3 enter a vector if not specified defaults to ['r','b--']
%       Plotype 4, you can enter a vector of colors/linetypes this will
%       apply to all subplots, if you are doing subplots and want different
%       colors enter a cell where each row corresponds to a different data 
%       data subset, if not specified defaults to matlab's normal colors
%
%   plotlabels only used when plotType=6 
%       Must be Nx3+ m(optional) size where N is the
%       number of of subsets in plotdata.  m is the number of items being 
%       graphed in a plot and correspond to the legend entries.
%       Must be a cell of the foloowing form:
%       {['Title1', 'Xlabel1', 'Ylabel1', 'legend1', legend2', ...;
%       ['Title2', 'Xlabel2', 'Ylabel2', 'legend1', legend2', ...]}
%       Note the legend options are optional for each subplot
%
%       If plotlabels is excluded the function will still plot without
%       labels
if isfield(data,'tvec')
    t=data.tvec;
else
    t=zeros(1,length(data.switch));
    type=1;
    for i=2:length(t)
        
        if type ==1
            
            t(i)=t(i-1)+simparam.tsteps;
            
        elseif type ==2
            
            t(i)=t(i-1)+simparam.tstepf;
        end
        
        if data.switch(i)==1
            if type==1
                type=2;
            elseif type==2
                type=1;
            end
        end
        
    end
end


switch plotType
    
    case 1
        
        %Plot Energy Values
        figure(fignum)
        hold on,
        plot(t,data.PeGravity, 'LineWidth', 1.2)
        plot(t,data.PeSpring, 'LineWidth', 1.2)
        plot(t,data.KE, 'LineWidth', 1.2)
        plot(t,data.Etot, 'LineWidth', 1.2)
        xlabel('Time [sec]'), ylabel('Energy [J]')
        title('System Energy Plot')
        legend('Gravity_PE', 'Spring_PE', 'Kin Ener', 'Total Ener' )
        hold off
        
    case {2, 3}
        %plots plotvec decomposed into stance and flight components
        if ~exist('plotcolor','var')
            % allows you to choose plot things
            if plotType==2
                plotcolor=["r","b--"];
            elseif plotType==3
                plotcolor=["r","b--","k"];
            end
        end
        
        %Decompose Data to plot x,y
        figure(fignum)
        hold on
        plotvec=[1; find(data.switch==1)];
        
        type=1;
        for i=1:length(plotvec)-1
            if type ==1
                plot(plotdata(plotvec(i):plotvec(i+1),1),plotdata(plotvec(i):plotvec(i+1),2),plotcolor(1), 'LineWidth', 1.2)
                if plotType==3
                    plot(plotdata(plotvec(i):plotvec(i+1),1),ones(plotvec(i+1)-plotvec(i)+1,1)*data.yoffset(i),plotcolor(3), 'LineWidth', 1.2)
                end
                type=2;
                
            elseif type ==2
                plot(plotdata(plotvec(i):plotvec(i+1),1),plotdata(plotvec(i):plotvec(i+1),2),plotcolor(2), 'LineWidth', 1.2)
                if plotType==3
                    plot(plotdata(plotvec(i):plotvec(i+1),1),ones(plotvec(i+1)-plotvec(i)+1,1)*data.yoffset(i),plotcolor(3), 'LineWidth', 1.2)
                end
                type=1;
            end
        end
        
        if plotType==2
            legend('Stance', 'Flight')
        elseif plotType==3
            legend('Stance', 'Terrain Height','Flight')
        end
        title('Point Mass Location')
        xlabel('X pos [m]')
        ylabel('Y pos [m]')
        hold off
        
    case 4
        figure(fignum)
        [~,n]=size(plotdata);
        
        flag=0;
        %Checks if plotlabels exists
        if exist('plotlabels','var')
            labels=1;
            [k,~]=size(plotlabels);
            if k~=n
                error('Plotlabels must have the same number of Rows as plotdata has columns')
            end
        else
            labels=0;
        end
        
        %Checks plot color options
        if exist('plotcolor','var')
            if isempty(plotcolor)
                colorflag=0;
            else
                [x,~]=size(plotcolor);
                if x==1
                    colorflag=1;
                    if iscell(plotcolor)
                        colors=plotcolor{1};
                    else
                        colors=plotcolor;
                    end
                    
                elseif x~=n
                    warning("Not enough rows in plotcolor using default values")
                    colorflag=0;
                else
                    colorflag=2;
                end
            end
        else
            colorflag=0;
            
        end
        
        %loops through each item in plot length
        for i=1:n
            
            dat=plotdata{i};
            [~,len]=size(dat);
            
            %Checks all of the plot color things
            
            if colorflag==2 || colorflag==1
                if colorflag==2
                    colors=plotcolor{n};
                end
                if length(colors)<length(dat(1,:))
                    flag=1;
                    warning("One of the plotcolors row does not have enough elements using the default colors")
                end
            end
            
            for j=1:len
                subplot(n,1,i)
                hold on
                if colorflag==0 || flag==1
                    plot(t,dat(:,j),'Linewidth',1.6)
                else
                    plot(t,dat(:,j),colors(j),'Linewidth',1.6)
                end
            end
            flag=0;
            if labels==1
                label_cur=plotlabels{i};
                title(label_cur(1))
                xlabel(label_cur(2))
                ylabel(label_cur(3))
                if length(label_cur)>3
                    legend(label_cur(4:end))
                end
            else
                xlabel("Time [sec]")
            end
            hold off           
        end          
end